
http 모듈
    http 웹서버를 생성하는 것과 관련된 모든 기능을 담당

    createServer() : server 객체를 생성
    writeHead() : https res message(응답메시지) header를 구성
    end()  : http res message(응답메시지) body를 작성
    listen() :서버를 실행하고 클라이언트를 기다림

---------------------------------------------------------------------

express 모듈

    http모듈만 사용해서 웹서버를 구성하면 직접 많은 기능을 구현 
    코드가 복잡하고 지저분해짐 그러나 간단한 코드로 웹서버의 기능을 
    대부분 혼자서 구현이 가능한 express모듈이 등장

    npm i express

    nestJS 모듈
        객체지향 개발이 가능, 의존성 부여

        
---------------------------------------------------------------------

nodemon 모듈
    서버 코드를 변경할 떄 마다 서버를 종료하지 않아도 알아서 서버를 재시작
    npm i nodemon
    npm i -g nodemon(환경변수설정안되있을떄 설치법)

---------------------------------------------------------------------

//404 => 해당 주소에 맞는 페이지가 없을떄 나는 오류
//200 => 요청이 성공했을때
/*암호화
    복호화 (열쇠 암호화를 푸는것) = 양방향 암호화
    열쇠 = 키값 ("max")

    비밀번호 = 단방향 암호화 = 복호화 x =비교만 가능 ex)bcrypt
*/

대칭키  (암호화 했던 키와 복호화 했던 키가 같은경우) - 속도가 빠르다
비대칭키(공개키)  (암호화했던 키와 복호화 했던 키가 다른경우) 

---------------------------------------------------------------------

express 함꼐 자주 사용되는 미들웨어
    
    express의 핵심은 미들웨어 

    middle ware?
        - HTTP통신간, 요청(req) 그리고 응답(res) 중간에 위치하여 미들웨어라고 부른다.
          중간에서 요청 응답을 조작하여 기능을 추가하기도, 나쁜요청을 걸러내는 역할도 하고있으며
          express의 대부분의 기능이 미들웨어로 컨트롤하기 떄문에 express의 전부라고할 수 있음

    사용법

    app.use(미들웨어) : 모든 요청에서 미드웨어 실행
    app.use('/abc',미들웨어) : /abc 로 시작하는 요청에서만 실행
    app.post('/abc',미들웨어) : /abc 로시작하는 post 메소드의 요청에서만 실행

    1. morgan
    2. body-parser
    3. static
    4. cookie-parser
    

---------------------------------------------------------------------\

method(메소드) 방식의 종류

GET: 서버의 자원을 가지고 오고자 할 때 (조회) 사용,요청의 본문에 요청 데이터를 넣지않음
     주소를 활용하여 데이터를 전송,보안의 취약

     1) query-string
        ex) https://www.백엔드주소:3000/goods?goodsId=32&goodsName="맛난수박"
        qs => goodsId,goodsName (프론트에서도 가지고올수있음)

     2) param
        ex) https://www.백엔드주소:3000/goods/32/맛있는수박

        *
        사용 이유는, 내가 얻고자 하는 데이터 값을 받아올 때
        백엔드에게 해당 데이터를 구분할 수 있는 키값을 보내야하는데
        클릭 된 순간 페이지가 이동되기 떄문에 그 값을 유지할 수가없음
        따라서 주소로 데이터를 다음페이지로 보내고 해당 페이지에서 고유 키 값을 
        받아와서 백엔드에게 전송

        리액트에서는 
        중첩 라이팅 시 부여한 이름으로 param 값을 읽어오고
        
        query-string 의 경우는 qs라이브러리를 통해 읽을 수 있다
        단, 위의 예시 주소에서 goods?goodId=32 와 같이 주소에 데이터를 넣어서
        페이지 이동을 하더라도  react-router-dom은 /goods로 인식한다

        *
        백엔드에서는
        app.get("/goods")
        qs모듈을 사용해서 qurey string 값을 읽어올 수 있음

        app.get("/goodid/:goodIdx/:goodName")
        console.log(goodIdx)
        console.log(goodName)

        ("/goodid/:goodIdx/:goodName")
        console.log(goodIdx)=>32
        console.log(goodName)=>맛있는수박


POST:  서버의 자원을 새로 등록하고자 할 때 사용(생성), 요청의 본문에 데이터
       를 넣어서 전송

       const data={
            prodName: "맛좋은 참외",
            prodDesc:"참외롭다",
            
       }
        *프론트
       ex)axios.post(https://www.백엔드주소:3000/goods,data)
       기본
       ex)axios.post(https://www.백엔드주소:3000/goods/32,data)
         post는 본문에 data를넣을수있음
       ex)axios.get(https://www.백엔드주소:3000/goods,data)
         get은 본분에 data를 넣을수없음

        *백
                post 에서도 주소데이터 첨부 및 읽기 가능
            app.post("/goods/:goodIdx" ,(req,res)=>{
                console.log(req.body.prodName)
                
               const result= //데이터 저장하고 조회하고 갱신하고 삭제하는 로직

               res.body.data=result 

                
            })
   * 데이터 통신 종류의 구분

PUT: 서버의 데이터를 요청에 들어온 데이터로 통쨰로 업데이트

PATCH: 서버의 자원을 요청에 들어온 데이터로 일부만 업데이트

DELETE: 서버의 자원을 삭제 할 떄 사용, 본문에 데이터를 넣지않음

OPTIONS: 요청을 하기전에 통신 옵션(헤더)을 설정하기 위해 사용


* post는 만능

qurey string,param, body 모두 데이터를 받아올 수 있고

create, read,update,delete 요청을 모두 수행할 수있음
(get도 가능 , 단 데이터 노출)

그러나, 특별한 경우(데이터를 숨기거나, 노출x)가 아닌 이상
method에 맞게 진행해주는 것이 가독성이 좋다
---------------------------------------------------------------------

REST, REST API

REST?
    자원을 이름으로 구분하여 해당 자원의 정보를 주고 받는 행위
    장점: 가독성

    ex) "/goods"

API?
    데이터와 기능의 집합을 제공, 프로그램 상호간 상호작용
    서로 정보를 교환하도록 하는 것

REST API?
    REST 기반으로 서비스 API를 구현한 것
    요츰 대부분의 기업들이 REST API를 채용하고 있으나 Graph QL과 같은 
    api방식도 많이 채용하고 있음

* 백엔드와 협업에서 굉장히 중요
    "/login"
    "/singIn"
    "/post"
    "/user"
    ...
    ..
    .

    api 문서 
    (
        같은 백엔드 개발자끼리와 자신이 만든 api를 공유,
        프론트엔드 개발자는 내가 어떤 주소로 어떤 데이터를 보냈을 때
        어떤 데이터가 응답으로 전달되는지 확인
    )
   
   관련 라이브러리 : swagger, pow


---------------------------------------------------------------------